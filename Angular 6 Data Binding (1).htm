<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Angular 6 Data Binding</title>
<link rel="shortcut icon" href="https://www.tutorialspoint.com/favicon.ico" type="image/x-icon">
<!-- base href="https://www.tutorialspoint.com/" -->
<script type="text/x-mathjax-config;executed=true">
MathJax.Hub.Config({
tex2jax: { inlineMath: [["$","$"],["\(","\)"]] },
"HTML-CSS": {
  linebreaks: { automatic: true, width: "container" }          
}              
});
</script>
<script src="Angular%206%20Data%20Binding_files/MathJax.js" id=""> </script>
<script type="text/javascript" src="Angular%206%20Data%20Binding_files/jquery.js"></script>
<script type="text/javascript" src="Angular%206%20Data%20Binding_files/jquery-ui.js"></script>
<link rel="stylesheet" href="Angular%206%20Data%20Binding_files/jquery-ui.css">
<link rel="stylesheet" type="text/css" href="Angular%206%20Data%20Binding_files/print.css">
<link rel="stylesheet" type="text/css" href="Angular%206%20Data%20Binding_files/prettify.css">
<script type="text/javascript" src="Angular%206%20Data%20Binding_files/prettify.js"></script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1px; bottom: 2px; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style>
<style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
<body onload="prettyPrint()"><div id="MathJax_Message" style="display: none;"></div>
<div id="print-wrapper">
   <div id="print-area-wrapper">
      <div class="clearfix" id="actual-print-area">
<div class="row">
             <h1 class="title">Angular 6 - Data Binding</h1>
             <a href="https://www.tutorialspoint.com/angular6/angular6_data_binding.htm" id="print-source">https://www.tutorialspoint.com/angular6/angular6_data_binding.htm</a><div id="page-print-copy">Copyright © tutorialspoint.com</div>
             <div style="clear:both"></div>
             <br>
	     <div id="page-content">
<div style="padding-bottom:5px;padding-left:10px;text-align: center;">Advertisements</div>
<!--?php 
include ("../top-adv.php"); 
?-->
<p>Data Binding is available right from AngularJS, Angular 2,4 and is 
now available in Angular 6 as well. We use curly braces for data binding
 - {{}}; this process is called interpolation. We have already seen in 
our previous examples how we declared the value to the variable title 
and the same is printed in the browser.</p>
<p>The variable in the <b>app.component.html</b> file is referred as {{title}} and the value of title is initialized in the <b>app.component.ts</b> file and in <b>app.component.html</b>, the value is displayed.</p>
<p>Let us now create a dropdown of months in the browser. To do that , we have created an array of months in <b>app.component.ts</b> as follows −</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Component</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="lit">@Component</span><span class="pun">({</span><span class="pln">
   selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-root'</span><span class="pun">,</span><span class="pln">
   templateUrl</span><span class="pun">:</span><span class="pln"> </span><span class="str">'./app.component.html'</span><span class="pun">,</span><span class="pln">
   styleUrls</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">'./app.component.css'</span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   title </span><span class="pun">=</span><span class="pln"> </span><span class="str">'Angular 6 Project!'</span><span class="pun">;</span><span class="pln">
   </span><span class="com">// declared array of months.</span><span class="pln">
   months </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="str">"January"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Feburary"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"March"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"April"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"May"</span><span class="pun">,</span><span class="pln"> 
            </span><span class="str">"June"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"July"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"August"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"September"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">"October"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"November"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"December"</span><span class="pun">];</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>The month's array that is shown above is to be displayed in a 
dropdown in the browser. For this, we will use the following line of 
code −</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="com">&lt;!--The content below is only a placeholder and can be replaced. --&gt;</span><span class="pln">
</span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">style</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"</span><span class="pln">text</span><span class="pun">-</span><span class="pln">align</span><span class="pun">:</span><span class="pln">center</span><span class="atv">"</span><span class="tag">&gt;</span><span class="pln">
   </span><span class="tag">&lt;h1&gt;</span><span class="pln">
      Welcome to {{title}}.
   </span><span class="tag">&lt;/h1&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;div&gt;</span><span class="pln"> Months :
   </span><span class="tag">&lt;select&gt;</span><span class="pln">
      </span><span class="tag">&lt;option</span><span class="pln"> *</span><span class="atn">ngFor</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"let i of months"</span><span class="tag">&gt;</span><span class="pln">{{i}}</span><span class="tag">&lt;/option&gt;</span><span class="pln">
   </span><span class="tag">&lt;/select&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></pre>
<p>We have created the normal select tag with option. In option, we have used the <b>for loop</b>. The <b>for loop</b> is used to iterate over the months' array, which in turn will create the option tag with the value present in the months.</p>
<p>The syntax <b>for</b> in Angular is <b>*ngFor = "let I of months"</b> and to get the value of months we are displaying it in {{i}}.</p>
<p>The two curly brackets help with data binding. You declare the variables in your <b>app.component.ts</b> file and the same will be replaced using the curly brackets.</p>
<p>Let us see the output of the above month's array in the browser</p>
<img src="Angular%206%20Data%20Binding_files/output_months_array_in_browser.jpg" alt="Output Month's Array in Browser">
<p>The variable that is set in the <b>app.component.ts</b> can be bound with the <b>app.component.html</b> using the curly brackets; for example, <b>{{}}</b>.</p>
<p>Let us now display the data in the browser based on condition. Here, 
we have added a variable and assigned the value as true. Using the if 
statement, we can hide/show the content to be displayed.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Component</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="lit">@Component</span><span class="pun">({</span><span class="pln">
   selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-root'</span><span class="pun">,</span><span class="pln">
   templateUrl</span><span class="pun">:</span><span class="pln"> </span><span class="str">'./app.component.html'</span><span class="pun">,</span><span class="pln">
   styleUrls</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">'./app.component.css'</span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   title </span><span class="pun">=</span><span class="pln"> </span><span class="str">'Angular 4 Project!'</span><span class="pun">;</span><span class="pln">
   </span><span class="com">//array of months.</span><span class="pln">
   months </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="str">"January"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"February"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"March"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"April"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">"May"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"June"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"July"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"August"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"September"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">"October"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"November"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"December"</span><span class="pun">];</span><span class="pln">
   isavailable </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">   </span><span class="com">//variable is set to true</span><span class="pln">
</span><span class="pun">}</span></pre>
<p></p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="com">&lt;!--The content below is only a placeholder and can be replaced.--&gt;</span><span class="pln">
</span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">style</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"</span><span class="pln">text</span><span class="pun">-</span><span class="pln">align</span><span class="pun">:</span><span class="pln">center</span><span class="atv">"</span><span class="tag">&gt;</span><span class="pln">
   </span><span class="tag">&lt;h1&gt;</span><span class="pln">
      Welcome to {{title}}.
   </span><span class="tag">&lt;/h1&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;div&gt;</span><span class="pln"> Months :
   </span><span class="tag">&lt;select&gt;</span><span class="pln">
      </span><span class="tag">&lt;option</span><span class="pln"> *</span><span class="atn">ngFor</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"let i of months"</span><span class="tag">&gt;</span><span class="pln">{{i}}</span><span class="tag">&lt;/option&gt;</span><span class="pln">
   </span><span class="tag">&lt;/select&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;br/&gt;</span><span class="pln">
</span><span class="tag">&lt;div&gt;</span><span class="pln">
   </span><span class="tag">&lt;span</span><span class="pln"> *</span><span class="atn">ngIf</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"isavailable"</span><span class="tag">&gt;</span><span class="pln">Condition is valid.</span><span class="tag">&lt;/span&gt;</span><span class="pln"> 
  </span><span class="com">&lt;!--over here based on if condition the text condition is valid is displayed. 
  If the value of isavailable is set to false it will not display the text.--&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></pre>
<h3>Output</h3>
<img src="Angular%206%20Data%20Binding_files/output_using_if_statement.jpg" alt="Output Using IF-Statement">
<p>Let us try the above example using the <b>IF THEN ELSE</b> condition.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Component</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="lit">@Component</span><span class="pun">({</span><span class="pln">
   selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-root'</span><span class="pun">,</span><span class="pln">
   templateUrl</span><span class="pun">:</span><span class="pln"> </span><span class="str">'./app.component.html'</span><span class="pun">,</span><span class="pln">
   styleUrls</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">'./app.component.css'</span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   title </span><span class="pun">=</span><span class="pln"> </span><span class="str">'Angular 4 Project!'</span><span class="pun">;</span><span class="pln">
   </span><span class="com">//array of months.</span><span class="pln">
   months </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="str">"January"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"February"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"March"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"April"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">"May"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"June"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"July"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"August"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"September"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">"October"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"November"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"December"</span><span class="pun">];</span><span class="pln">
   isavailable </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>In this case, we have made the <b>isavailable</b> variable as false. To print the <b>else</b> condition, we will have to create the <b>ng-template</b> as follows −</p>
<pre class="result notranslate">&lt;ng-template #condition1&gt;Condition is invalid&lt;/ng-template&gt;
</pre>
<p>The full code looks like this −</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="com">&lt;!--The content below is only a placeholder and can be replaced.--&gt;</span><span class="pln">
</span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">style</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"</span><span class="pln">text</span><span class="pun">-</span><span class="pln">align</span><span class="pun">:</span><span class="pln">center</span><span class="atv">"</span><span class="tag">&gt;</span><span class="pln">
   </span><span class="tag">&lt;h1&gt;</span><span class="pln">
      Welcome to {{title}}.
   </span><span class="tag">&lt;/h1&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;div&gt;</span><span class="pln"> Months :
   </span><span class="tag">&lt;select&gt;</span><span class="pln">
      </span><span class="tag">&lt;option</span><span class="pln"> *</span><span class="atn">ngFor</span><span class="pun">=</span><span class="atv">"let i of months"</span><span class="tag">&gt;</span><span class="pln">{{i}}</span><span class="tag">&lt;/option&gt;</span><span class="pln">
   </span><span class="tag">&lt;/select&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;br/&gt;</span><span class="pln">
</span><span class="tag">&lt;div&gt;</span><span class="pln">
   </span><span class="tag">&lt;span</span><span class="pln"> *</span><span class="atn">ngIf</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"isavailable; else condition1"</span><span class="tag">&gt;</span><span class="pln">Condition is valid.</span><span class="tag">&lt;/span&gt;</span><span class="pln">
   </span><span class="tag">&lt;ng-template</span><span class="pln"> #</span><span class="atn">condition1</span><span class="tag">&gt;</span><span class="pln">Condition is invalid</span><span class="tag">&lt;/ng-template&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></pre>
<p><b>If</b> is used with the else condition and the variable used is <b>condition1</b>. The same is assigned as an <b>id</b> to the <b>ng-template</b>, and when the available variable is set to false the text <b>Condition is invalid</b> is displayed.</p>
<p>The following screenshot shows the display in the browser.</p>
<img src="Angular%206%20Data%20Binding_files/output_using_if_else_condition.jpg" alt="Output Using If-Else Condition">
<p>Let us now use the <b>if then else</b> condition.</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Component</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="lit">@Component</span><span class="pun">({</span><span class="pln">
   selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-root'</span><span class="pun">,</span><span class="pln">
   templateUrl</span><span class="pun">:</span><span class="pln"> </span><span class="str">'./app.component.html'</span><span class="pun">,</span><span class="pln">
   styleUrls</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">'./app.component.css'</span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   title </span><span class="pun">=</span><span class="pln"> </span><span class="str">'Angular 4 Project!'</span><span class="pun">;</span><span class="pln">
   </span><span class="com">//array of months.</span><span class="pln">
   months </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="str">"January"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"February"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"March"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"April"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">"May"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"June"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"July"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"August"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"September"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">"October"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"November"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"December"</span><span class="pun">];</span><span class="pln">
   isavailable </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>Now, we will make the variable <b>isavailable</b> as true. In the html, the condition is written in the following way −</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="com">&lt;!--The content below is only a placeholder and can be replaced.--&gt;</span><span class="pln">
</span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">style</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"</span><span class="pln">text</span><span class="pun">-</span><span class="pln">align</span><span class="pun">:</span><span class="pln">center</span><span class="atv">"</span><span class="tag">&gt;</span><span class="pln">
   </span><span class="tag">&lt;h1&gt;</span><span class="pln">
   Welcome to {{title}}.
   </span><span class="tag">&lt;/h1&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;div&gt;</span><span class="pln"> Months :
   </span><span class="tag">&lt;select&gt;</span><span class="pln">
      </span><span class="tag">&lt;option</span><span class="pln"> *</span><span class="atn">ngFor</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"let i of months"</span><span class="tag">&gt;</span><span class="pln">{{i}}</span><span class="tag">&lt;/option&gt;</span><span class="pln">
   </span><span class="tag">&lt;/select&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;br/&gt;</span><span class="pln">
</span><span class="tag">&lt;div&gt;</span><span class="pln">
   </span><span class="tag">&lt;span</span><span class="pln"> *</span><span class="atn">ngIf</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"isavailable; then condition1 else condition2"</span><span class="tag">&gt;</span><span class="pln">Condition is valid.</span><span class="tag">&lt;/span&gt;</span><span class="pln">
   </span><span class="tag">&lt;ng-template</span><span class="pln"> #</span><span class="atn">condition1</span><span class="tag">&gt;</span><span class="pln">Condition is valid</span><span class="tag">&lt;/ng-template&gt;</span><span class="pln">
   </span><span class="tag">&lt;ng-template</span><span class="pln"> #</span><span class="atn">condition2</span><span class="tag">&gt;</span><span class="pln">Condition is invalid</span><span class="tag">&lt;/ng-template&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></pre>
<p>If the variable is true, then <b>condition1</b>, else <b>condition2</b>. Now, two templates are created with id <b>#condition1</b> and <b>#condition2</b>.</p>
<p>The display in the browser is as follows −</p>
<img src="Angular%206%20Data%20Binding_files/output_using_if_statement.jpg" alt="Output Using IF-Statement">
            </div>
         </div>
      </div>
   </div>
</div>


</body></html>